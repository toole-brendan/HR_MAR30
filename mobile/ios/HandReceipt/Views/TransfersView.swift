import SwiftUI\n\nstruct TransfersView: View {\n    // Inject AuthViewModel to get current user ID\n    @StateObject private var authViewModel = AuthViewModel()\n    // Initialize TransfersViewModel with the current user ID\n    @StateObject private var viewModel: TransfersViewModel\n    
    // Initializer to inject current user ID\n    init() {\n        // Temporarily create AuthViewModel here to get ID. Ideally, AuthViewModel would be an EnvironmentObject.\n        let authVM = AuthViewModel()\n        _viewModel = StateObject(wrappedValue: TransfersViewModel(currentUserId: authVM.currentUser?.userId))\n    }\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) { // Use VStack to hold Pickers and List\n                // Filter Pickers\n                Picker(\"Direction\", selection: $viewModel.selectedDirectionFilter) {\n                    ForEach(TransfersViewModel.FilterDirection.allCases) {\n                        direction in\n                        Text(direction.rawValue).tag(direction)\n                    }\n                }\n                .pickerStyle(.segmented)\n                .padding(.horizontal)\n                .padding(.top) // Add some top padding\n                 \n                Picker(\"Status\", selection: $viewModel.selectedStatusFilter) {\n                     ForEach(TransfersViewModel.FilterStatus.allCases) {\n                        status in\n                        Text(status.rawValue).tag(status)\n                    }\n                }\n                .pickerStyle(.segmented)\n                .padding(.horizontal)\n                .padding(.bottom, 8) // Add padding below status picker\n\n                // List Content with Action State Overlay\n                ZStack {\n                    Group {\n                        switch viewModel.loadingState {\n                        case .idle:\n                            Text(\"Select filters to load transfers.\")\n                                .foregroundColor(.gray)\n                        case .loading:\n                            ProgressView()\n                        case .success(let transfers):\n                            if viewModel.filteredTransfers.isEmpty {\n                                Text(\"No transfers found matching filters.\")\n                                    .foregroundColor(.gray)\n                            } else {\n                                List {\n                                    ForEach(viewModel.filteredTransfers) {\n                                        transfer in\n                                        NavigationLink(destination: TransferDetailView(transfer: transfer, viewModel: viewModel)) {\n                                            TransferListItemView(transfer: transfer)\n                                        }\n                                    }\n                                }\n                                .listStyle(PlainListStyle())\n                                .refreshable {\n                                     viewModel.fetchTransfers()\n                                 }\n                            }\n                        case .error(let message):\n                            ErrorStateView(message: message) {\n                                viewModel.fetchTransfers()\n                            }\n                        }\n                    }\n                    .frame(maxWidth: .infinity, maxHeight: .infinity)\n                     \n                    // Overlay for Action State (Success/Error Messages)\n                    ActionStatusOverlay(state: viewModel.actionState)\n                }\n            }\n            .navigationTitle(\"Transfers\")\n            .toolbar {\n                 ToolbarItem(placement: .navigationBarTrailing) {\n                      Button {\n                          viewModel.fetchTransfers()\n                      } label: {\n                          Label(\"Refresh\", systemImage: \"arrow.clockwise\")\n                      }\n                      .disabled(viewModel.loadingState == .loading)\n                  }\n              }\n        }\n    }\n}\n\n// Separate view for list item presentation\nstruct TransferListItemView: View {\n    let transfer: Transfer\n    \n    // Use a Formatter for dates\n    private static var dateFormatter: DateFormatter = {\n        let formatter = DateFormatter()\n        formatter.dateStyle = .short\n        formatter.timeStyle = .short\n        return formatter\n    }()\n    \n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Text(\"Item: \(transfer.propertyName ?? transfer.propertySerialNumber)\")\n                    .font(.headline)\n                Text(\"SN: \(transfer.propertySerialNumber)\")\n                    .font(.subheadline)\n                    .foregroundColor(.gray)\n                 Text(\"From: \(transfer.fromUser?.username ?? \"Unknown\")\")\n                 Text(\"To: \(transfer.toUser?.username ?? \"Unknown\")\")\n                 Text(\"Requested: \(transfer.requestTimestamp, formatter: Self.dateFormatter)\")\n            }\n            Spacer()\n            Text(transfer.status.rawValue)\n                .font(.caption)\n                .padding(4)\n                .background(statusColor(transfer.status))\n                .foregroundColor(.white)\n                .cornerRadius(4)\n        }\n    }\n    \n    // Helper to get status color\n    private func statusColor(_ status: TransferStatus) -> Color {\n        switch status {\n        case .PENDING: return .orange\n        case .APPROVED: return .green\n        case .REJECTED: return .red\n        case .CANCELLED: return .gray\n        case .UNKNOWN: return .purple\n        }\n    }\n}\n\n// Placeholder for the Detail View\nstruct TransferDetailView: View {\n    let transfer: Transfer\n    @ObservedObject var viewModel: TransfersViewModel\n    
    @Environment(\.dismiss) var dismiss\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(\"Transfer Details\")\n                .font(.title)\n                .padding(.bottom)\n            
            TransferListItemView(transfer: transfer)\n                .padding(.bottom)\n            
            Spacer()\n            
            // Action Buttons Section\n            if transfer.status == .PENDING && transfer.toUserId == viewModel.currentUserId {\n                HStack {\n                     Button(\"Approve\") {\n                        viewModel.approveTransfer(transferId: transfer.id)\n                     }\n                     .buttonStyle(.borderedProminent)\n                     .tint(.green)\n                     .disabled(viewModel.actionState == .loading)\n                     
                     Button(\"Reject\") {\n                         viewModel.rejectTransfer(transferId: transfer.id)\n                     }\n                     .buttonStyle(.borderedProminent)\n                     .tint(.red)\n                     .disabled(viewModel.actionState == .loading)\n                 }\n                 .padding()\n                 
                 // Show loading specifically for actions\n                if viewModel.actionState == .loading {\n                    ProgressView()\n                        .padding(.top)\n                }\n             }\n             
            Spacer()\n        }\n        .padding()\n        .navigationTitle(\"Transfer #\(transfer.id.uuidString.prefix(8))\")
            .navigationBarTitleDisplayMode(.inline)\n    }\n}\n\n// New Overlay View for Action Status\nstruct ActionStatusOverlay: View {\n    let state: TransfersViewModel.ActionState\n    
    var body: some View {\n        VStack {\n             Spacer() // Push to bottom or center as desired\n             Group {\n                switch state {\n                case .idle, .loading:\n                    EmptyView()\n                case .success(let message):\n                    HStack {\n                        Image(systemName: \"checkmark.circle.fill\")\n                            .foregroundColor(.green)\n                        Text(message)\n                    }\n                    .padding()\n                    .background(.thinMaterial)\n                    .cornerRadius(10)\n                    .transition(.opacity.combined(with: .scale(scale: 0.8)))\n                case .error(let message):\n                    HStack {\n                        Image(systemName: \"exclamationmark.triangle.fill\")\n                            .foregroundColor(.red)\n                        Text(message)\n                            .lineLimit(2)\n                    }\n                    .padding()\n                    .background(.thinMaterial)\n                    .cornerRadius(10)\n                    .transition(.opacity.combined(with: .scale(scale: 0.8)))\n                }\n             }\n             .padding(.bottom, 30) // Adjust position\n         }\n         .animation(.spring(), value: state)\n    }\n}\n\nstruct TransfersView_Previews: PreviewProvider {\n    static var previews: some View {\n        // Adjust previews if needed, potentially mocking AuthViewModel or currentUserId\n        TransfersView()\n    }\n} 