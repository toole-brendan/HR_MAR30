import SwiftUI\n\nstruct TransfersView: View {\n    @StateObject private var viewModel = TransfersViewModel()\n    \n    // State for segmented control (Incoming/Outgoing)\n    @State private var selectedTransferType: TransferType = .incoming\n    \n    enum TransferType: String, CaseIterable, Identifiable {\n        case incoming = \"Incoming\"\n        case outgoing = \"Outgoing\"\n        var id: String { self.rawValue }\n    }\n\n    var body: some View {\n        NavigationView { // Keep NavigationView for title consistency\n            VStack {\n                Picker(\"Transfer Type\", selection: $selectedTransferType) {\n                    ForEach(TransferType.allCases) {\ type in\n                        Text(type.rawValue).tag(type)\n                    }\n                }\n                .pickerStyle(.segmented)\n                .padding()\n\n                // TODO: Display list based on selectedTransferType and ViewModel data\n                 List {\n                     if selectedTransferType == .incoming {\n                         Text(\"Incoming Transfers Placeholder List\")\n                         // ForEach(viewModel.incomingTransfers) { transfer in ... }\n                     } else {\n                         Text(\"Outgoing Transfers Placeholder List\")\n                         // ForEach(viewModel.outgoingTransfers) { transfer in ... }\n                     }\n                 }\n                 .listStyle(PlainListStyle())\n                \n                Spacer()\n            }\n            .navigationTitle(\"Transfers\")\n            // TODO: Add refresh logic\n        }\n    }\n}\n\nstruct TransfersView_Previews: PreviewProvider {\n    static var previews: some View {\n        TransfersView()\n    }\n} 