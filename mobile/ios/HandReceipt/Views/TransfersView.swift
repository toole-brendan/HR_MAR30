import SwiftUI\n\nstruct TransfersView: View {\n    @StateObject private var viewModel = TransfersViewModel()\n    \n    // State for segmented control (Incoming/Outgoing)\n    @State private var selectedTransferType: TransferType = .incoming\n    \n    enum TransferType: String, CaseIterable, Identifiable {\n        case incoming = \"Incoming\"\n        case outgoing = \"Outgoing\"\n        var id: String { self.rawValue }\n    }\n\n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) { // Use VStack to hold Pickers and List\n                // Filter Pickers\n                Picker(\"Direction\", selection: $viewModel.directionFilter) {\n                    ForEach(TransferDirectionFilter.allCases) {\n                        direction in\n                        Text(direction.rawValue).tag(direction)\n                    }\n                }\n                .pickerStyle(.segmented)\n                .padding(.horizontal)\n                .padding(.top) // Add some top padding\n                 \n                Picker(\"Status\", selection: $viewModel.statusFilter) {\n                     ForEach(TransferStatusFilter.allCases) {\n                        status in\n                        Text(status.rawValue).tag(status)\n                    }\n                }\n                .pickerStyle(.segmented)\n                .padding(.horizontal)\n                .padding(.bottom, 8) // Add padding below status picker\n\n                // List Content\n                Group {\n                    switch viewModel.transfersState {\n                    case .loading:\n                         Spacer() // Push ProgressView to center\n                        ProgressView()\n                         Spacer()\n                    case .success(let transfers):\n                        if transfers.isEmpty {\n                             Spacer() // Center text\n                             Text(\"No transfers found matching filters.\")\n                                .foregroundColor(.gray)\n                             Spacer()\n                        } else {\n                            List {\n                                ForEach(transfers) {\n                                    NavigationLink(destination: TransferDetailView(transfer: $0, viewModel: viewModel)) {\n                                        TransferListItemView(transfer: $0)\n                                    }\n                                }\n                            }\n                             .listStyle(PlainListStyle())\n                        }\n                    case .error(let message):\n                        Spacer() // Center text\n                        Text(\"Error: \(message)\")\n                            .foregroundColor(.red)\n                            .padding()\n                        Spacer()\n                    }\n                }\n                // .frame(maxHeight: .infinity) // Ensure Group fills remaining space - might not be needed with List\n            }\n            .navigationTitle(\"Transfers\")\n            // Keep refresh button if desired, fetchTransfers() now uses filters\n             .toolbar {\n                 ToolbarItem(placement: .navigationBarTrailing) {\n                      Button {\n                          viewModel.fetchTransfers()\n                      } label: {\n                          Label(\"Refresh\", systemImage: \"arrow.clockwise\")\n                      }\n                  }\n              }\n        }\n    }\n}\n\n// Separate view for list item presentation\nstruct TransferListItemView: View {\n    let transfer: Transfer\n    \n    // Use a Formatter for dates\n    private static var dateFormatter: DateFormatter = {\n        let formatter = DateFormatter()\n        formatter.dateStyle = .short\n        formatter.timeStyle = .short\n        return formatter\n    }()\n    \n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Text(\"Item: \(transfer.propertyName ?? transfer.propertySerialNumber)\")\n                    .font(.headline)\n                Text(\"SN: \(transfer.propertySerialNumber)\")\n                    .font(.subheadline)\n                    .foregroundColor(.gray)\n                 Text(\"From: \(transfer.fromUser?.username ?? \"Unknown\")\")\n                 Text(\"To: \(transfer.toUser?.username ?? \"Unknown\")\")\n                 Text(\"Requested: \(transfer.requestTimestamp, formatter: Self.dateFormatter)\")\n            }\n            Spacer()\n            Text(transfer.status.rawValue)\n                .font(.caption)\n                .padding(4)\n                .background(statusColor(transfer.status))\n                .foregroundColor(.white)\n                .cornerRadius(4)\n        }\n    }\n    \n    // Helper to get status color\n    private func statusColor(_ status: TransferStatus) -> Color {\n        switch status {\n        case .PENDING: return .orange\n        case .APPROVED: return .green\n        case .REJECTED: return .red\n        case .CANCELLED: return .gray\n        case .UNKNOWN: return .purple\n        }\n    }\n}\n\n// Placeholder for the Detail View\nstruct TransferDetailView: View {\n    let transfer: Transfer\n    // Use @ObservedObject since the ViewModel is passed in, not created here\n    @ObservedObject var viewModel: TransfersViewModel\n    
    @Environment(\.presentationMode) var presentationMode // To dismiss the view\n    @State private var actionCompletedSuccessfully = false // Track success for dismissal\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(\"Transfer Details\")\n                .font(.largeTitle)\n                .padding(.bottom)\n            
            TransferListItemView(transfer: transfer)\n                .padding(.bottom)\n            
            // Add more details if needed (e.g., Request Notes)\n            
            Spacer()\n            
            // Action Buttons Section\n            if transfer.status == .PENDING {\n                // Display Error if any\n                if let error = viewModel.actionError {\n                    Text(\"Error: \(error)\")\n                        .foregroundColor(.red)\n                        .padding(.bottom)\n                }\n                
                HStack {\n                     Button(\"Approve\") {\n                        viewModel.approveTransfer(transferId: transfer.id)\n                     }\n                     .buttonStyle(.borderedProminent)\n                     .tint(.green)\n                     .disabled(viewModel.isPerformingAction) // Disable while action is in progress\n                     
                     Button(\"Reject\") {\n                         viewModel.rejectTransfer(transferId: transfer.id)\n                     }\n                     .buttonStyle(.borderedProminent)\n                     .tint(.red)\n                     .disabled(viewModel.isPerformingAction) // Disable while action is in progress\n                 }\n                 .padding()\n                 
                 // Show loading indicator\n                if viewModel.isPerformingAction {\n                    ProgressView()\n                        .padding(.top)\n                }\n             }\n             
            Spacer()\n        }\n        .padding()\n        .navigationTitle(\"Transfer #\(transfer.id.uuidString.prefix(8))\")
            .navigationBarTitleDisplayMode(.inline)\n        .onChange(of: viewModel.isPerformingAction) {\n             oldValue, newValue in\n             // Check if action just finished successfully\n            if oldValue == true && newValue == false && viewModel.actionError == nil {\n                print(\"Action completed successfully, dismissing detail view.\")\n                // Simple dismissal, could add delay or success message\n                 presentationMode.wrappedValue.dismiss()\n             }\n         }\n         .onDisappear {\n             // Clear action error when view disappears\n             viewModel.actionError = nil\n             viewModel.isPerformingAction = false\n         }\n    }\n}\n\nstruct TransfersView_Previews: PreviewProvider {\n    static var previews: some View {\n        // Provide mock data or use preview-specific ViewModel\n        TransfersView()\n    }\n} 