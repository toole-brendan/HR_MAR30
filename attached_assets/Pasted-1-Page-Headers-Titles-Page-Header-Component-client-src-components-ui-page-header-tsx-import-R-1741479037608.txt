1. Page Headers / Titles
Page Header Component (client/src/components/ui/page-header.tsx):

import React, { ReactNode } from 'react';
import { cn } from '@/lib/utils';
interface PageHeaderProps {
  title: string;
  description?: string;
  actions?: ReactNode;
  className?: string;
}
export function PageHeader({ 
  title, 
  description, 
  actions, 
  className 
}: PageHeaderProps) {
  return (
    <div className={cn(
      "flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-8 pb-4 border-b border-gray-200 dark:border-white/10",
      className
    )}>
      <div>
        <div className="category-tag mb-1.5 uppercase text-xs tracking-wider font-medium text-purple-600 dark:text-purple-400">
          {title.includes(' ') ? title.split(' ')[0] : 'Overview'}
        </div>
        <h1 className="heading-large text-2xl md:text-3xl font-semibold text-gray-900 dark:text-white tracking-tight">
          {title}
        </h1>
        {description && (
          <p className="mt-2 text-base text-gray-600 dark:text-gray-300 max-w-2xl">
            {description}
          </p>
        )}
      </div>
      {actions && (
        <div className="flex flex-wrap items-center gap-3 mt-3 sm:mt-0">
          {actions}
        </div>
      )}
    </div>
  );
}
8VC Style Section Header (Usage Example):

{/* 8VC Style Section Header */}
<div className="mt-8 mb-4">
  <div className="category-tag mb-1.5">Data Visualization</div>
  <h2 className="heading-large mb-2 text-gray-900 dark:text-white">Performance charts</h2>
  <div className="horizontal-divider border-gray-200 dark:border-white/10"></div>
</div>
Typography Styles (client/src/index.css):

/* 8VC Style Typography */
.display-heading {
  @apply font-sans text-4xl md:text-5xl font-light leading-tight tracking-tight;
  font-size: var(--font-size-display);
}
.display-heading-italic {
  @apply font-sans text-4xl md:text-5xl font-light leading-tight tracking-tight italic;
  font-size: var(--font-size-display);
}
.heading-large {
  @apply font-sans text-3xl md:text-4xl font-light leading-tight;
  font-size: var(--font-size-heading);
}
.heading-medium {
  @apply font-sans text-2xl md:text-3xl font-light leading-tight;
  font-size: var(--font-size-subheading);
}
/* 8VC Category Tag */
.category-tag {
  @apply uppercase text-xs tracking-widest text-gray-500 dark:text-gray-400 font-medium;
  letter-spacing: 0.15em;
}
/* 8VC Horizontal Divider */
.horizontal-divider {
  @apply w-full h-px bg-gray-200 dark:bg-gray-800 my-8;
}
2. Card Components
Card Component (client/src/components/ui/card.tsx):

import * as React from "react"
import { cn } from "@/lib/utils"
const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "border bg-card text-card-foreground shadow-sm dark:bg-card-bg-dark dark:border-border",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"
const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"
const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight dark:text-theme-text-primary",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"
const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground dark:text-theme-text-secondary", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"
const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"
const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
8VC Card Styling (client/src/index.css):

/* 8VC Info Card */
.info-card-8vc {
  @apply p-8 md:p-12 border-t border-gray-200 dark:border-gray-800;
}
.card {
  @apply bg-white border border-border shadow-none;
  border-radius: var(--card-border-radius);
}
/* Apply standardized card background in dark mode */
.dark .card {
  background-color: hsl(var(--card-background));
  border-color: hsl(var(--border-primary));
}
8VC Card Implementation Example:

{/* 8VC Style Card */}
<div className="bg-white dark:bg-black border border-gray-200 dark:border-white/10 p-6 relative overflow-hidden">
  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/30 to-indigo-600/30 dark:from-purple-900/30 dark:to-indigo-900/30 opacity-10 pointer-events-none"></div>
  <div className="flex items-start">
    <div className="h-10 w-10 flex-shrink-0 flex items-center justify-center mr-4 bg-purple-500/10 text-purple-600 dark:text-purple-400">
      <Layers className="h-5 w-5" />
    </div>
    <div>
      <div className="category-tag mb-1.5 uppercase text-xs tracking-wider font-medium text-gray-500 dark:text-gray-400">Enterprise Ready</div>
      <h2 className="heading-medium mb-2 text-gray-900 dark:text-white text-xl font-medium">Commercial Integrations</h2>
      <p className="text-sm text-gray-500 dark:text-gray-400 mt-1 font-light">
        HandReceipt's commercial version integrates with enterprise systems, payment networks, and blockchain infrastructure to streamline
        your supply chain operations. Connect your existing systems below.
      </p>
    </div>
  </div>
</div>
3. Table Components
Table Component (client/src/components/ui/table.tsx):

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"
const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"
const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"
8VC Table Implementation Example:

{/* Transactions Table - 8VC Style */}
<div className="bg-white dark:bg-black border border-gray-200 dark:border-white/10 p-0 mt-4">
  <div className="p-5 border-b border-gray-200 dark:border-white/10">
    <div className="flex items-center justify-between">
      <h3 className="text-base font-medium text-gray-900 dark:text-white">Transaction Records</h3>
      {filteredTransactions.length > 0 && (
        <div className="text-xs text-gray-500 dark:text-gray-400 font-medium">
          Showing {filteredTransactions.length} of {displayTransactions.length} transactions
        </div>
      )}
    </div>
  </div>
  
  {isLoading ? (
    <div className="p-8 text-center">
      <div className="animate-spin h-8 w-8 border-2 border-purple-600 dark:border-purple-400 border-t-transparent rounded-full mx-auto mb-3"></div>
      <p className="text-gray-500 dark:text-gray-400">Loading transactions...</p>
    </div>
  ) : filteredTransactions.length === 0 ? (
    <div className="p-8 text-center">
      <FileText className="h-8 w-8 text-gray-400 mx-auto mb-3" />
      <p className="text-gray-500 dark:text-gray-400">No transactions found matching your criteria</p>
    </div>
  ) : (
    <div className="overflow-x-auto">
      <table className="w-full data-table">
        <thead>
          <tr className="border-b border-gray-200 dark:border-white/10">
            {/* Table headers */}
          </tr>
        </thead>
        <tbody>
          {/* Table rows */}
        </tbody>
      </table>
    </div>
  )}
</div>